image: maven:3.9-eclipse-temurin-17

stages:
  - build_test
  - package
  - docker_build_push
#  - deploy

variables:
  CI_REGISTRY_IMAGE: "registry.gitlab.com/n1xreyes/spring-boot-users-posts"
  DOCKER_IMAGE_TAG_SHA: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  DOCKER_IMAGE_TAG_LATEST: $CI_REGISTRY_IMAGE:latest
  # Maven variables
  MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository"
  JAR_FILE: target/*.jar

cache:
  key: "$CI_COMMIT_REF_SLUG-maven" # Cache per branch
  paths:
    - .m2/repository
    - target

build_and_test:
  stage: build_test
  script:
    - echo "--- Compiling and Running Tests ---"
    - mvn test
  artifacts:
    when: always
    reports:
      junit:
        - target/surefire-reports/TEST-*.xml
    paths:
      - target/

# Job: Package the application into an executable JAR
package_app:
  stage: package
  script:
    - echo "--- Packaging Application ---"
    - mvn package -DskipTests
  artifacts:
    paths:
      - ${JAR_FILE}
    expire_in: 1 week

build_docker:
  stage: docker_build_push
  image: docker:latest
  services:
    - docker:dind
  needs: ["package_app"]
  before_script:
    - echo "Logging into GitLab Container Registry..."
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  script:
    - echo "--- Building Docker Image ---"
    - ls -l target/
    - docker build -t "$DOCKER_IMAGE_TAG_SHA" -t "$DOCKER_IMAGE_TAG_LATEST" .
    - echo "Docker image built successfully:"
    - echo "  $DOCKER_IMAGE_TAG_SHA"
    - echo "  $DOCKER_IMAGE_TAG_LATEST"

    - echo "--- Pushing Docker Image to Registry ---"
    - docker push "$DOCKER_IMAGE_TAG_SHA"
    - docker push "$DOCKER_IMAGE_TAG_LATEST"
    - echo "Docker images pushed successfully."

# Job: Placeholder for Deployment to Kubernetes
#deploy_to_k8s_placeholder:
#  stage: deploy
#  image: alpine:latest
#  # This job needs the JAR artifact from the 'push_docker' job
#  needs: ["push_docker"]
#  script:
#    - echo "--- Placeholder: Deploying to Kubernetes ---"
#    - echo "This is a placeholder job. Actual deployment steps would go here."
#    - echo "Steps would typically involve:"
#    - echo "1. Login to a Docker Registry (e.g., GitLab Container Registry, Docker Hub, ECR, GCR)"
#    # - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#    - echo "2. Build the Docker image using the Dockerfile and the JAR artifact"
#    # - ls -l target/ # Verify JAR exists from previous stage artifact
#    # - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG . # Example: using commit tag
#    # - docker build -t my-registry/my-app:latest . # Example: generic
#    - echo "3. Push the Docker image to the registry"
#    # - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
#    # - docker push my-registry/my-app:latest
#    - echo "4. Configure kubectl (if not already configured on the runner)"
#    # - Configure KUBECONFIG variable or use GitLab's K8s integration
#    - echo "5. Apply Kubernetes manifests or use Helm to deploy/update the application"
#    # - kubectl apply -f k8s/deployment.yaml
#    # - helm upgrade --install my-release ./helm-chart -f values.yaml --set image.tag=$CI_COMMIT_TAG
#    - echo "6. Deploy Keycloak (if needed) and configure application connection details (secrets/configmaps)"
#    - echo "Deployment Complete (Placeholder)"
#  when: manual # Trigger this job manually from the GitLab UI
#  environment:
#    name: staging
#    # url: Link to the deployed environment