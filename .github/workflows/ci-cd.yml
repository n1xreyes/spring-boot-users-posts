name: Build, Test, Package, and Deploy Placeholder

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch:

env:
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"

jobs:
  build_and_test:
    name: Build & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build and run tests with Maven
        run: mvn test

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4
        if: always()
        with:
          report_paths: '**/target/surefire-reports/TEST-*.xml'

  package:
    name: Package Application
    runs-on: ubuntu-latest
    needs: build_and_test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Package application with Maven
        run: mvn package -DskipTests

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: spring-boot-app-jar
          path: target/*.jar

  deploy_placeholder:
    name: Deploy to K8s (Placeholder)
    runs-on: ubuntu-latest
    needs: package

    # Only run this job if the workflow was triggered manually via workflow_dispatch
    if: github.event_name == 'workflow_dispatch'

    environment:
      name: staging
      # url: Link to the deployed environment

    steps:
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: spring-boot-app-jar
          path: target/

      - name: Deploy Placeholder Steps
        run: |
          echo "--- Placeholder: Deploying to Kubernetes ---"
          echo "JAR artifact downloaded to target/:"
          ls -l target/ # Verify the JAR exists
          echo "This is a placeholder job. Actual deployment steps would go here."
          echo "Steps would typically involve:"
          echo "1. Login to a Docker Registry (e.g., GitHub Container Registry, Docker Hub, ECR, GCR)"
          # echo "   docker login ghcr.io -u $GITHUB_ACTOR -p ${{ secrets.GITHUB_TOKEN }}"
          echo "2. Build the Docker image using the Dockerfile and the JAR artifact"
          # echo "   docker build -t ghcr.io/${{ github.repository }}:latest ." # Example for GHCR
          # echo "   docker build -t my-registry/my-app:latest ." # Example: generic
          echo "3. Push the Docker image to the registry"
          # echo "   docker push ghcr.io/${{ github.repository }}:latest"
          # echo "   docker push my-registry/my-app:latest"
          echo "4. Configure kubectl (if not already configured on the runner)"
          # echo "   Use actions like 'azure/k8s-set-context' or 'google-github-actions/auth' + 'setup-gcloud'"
          echo "5. Apply Kubernetes manifests or use Helm to deploy/update the application"
          # echo "   kubectl apply -f k8s/deployment.yaml"
          # echo "   helm upgrade --install my-release ./helm-chart -f values.yaml --set image.tag=latest"
          echo "6. Deploy Keycloak (if needed) and configure application connection details (secrets/configmaps)"
          echo "Deployment Complete (Placeholder)"